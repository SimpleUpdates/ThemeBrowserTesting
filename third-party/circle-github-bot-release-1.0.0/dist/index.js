// Generated by CoffeeScript 2.3.1
(function() {
  /*
  Copyright 2017-present TheMadCreator

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  var Bot, ENV, basename, curl, exec, execSync;

  ({basename} = require('path'));

  ({execSync} = require('child_process'));

  ENV = {
    // Required ENV variables
    auth: 'GH_AUTH_TOKEN',
    buildNum: 'CIRCLE_BUILD_NUM',
    buildUrl: 'CIRCLE_BUILD_URL',
    home: 'HOME',
    repo: 'CIRCLE_PROJECT_REPONAME',
    sha1: 'CIRCLE_SHA1',
    username: 'CIRCLE_PROJECT_USERNAME'
  };

  // Synchronously execute command and return trimmed stdout as string
  // Aux variables, not in ENV. See Bot.create
  // commitMessage : ''
  // prNumber      : ''
  // githubDomain  : 'api.github.com'
  exec = function(command, options) {
    return execSync(command, options).toString('utf8').trim();
  };

  // Syncronously POST to `url` with `data` content
  curl = function(url, data) {
    return exec(`curl --silent --data @- ${url}`, {
      input: data
    });
  };

  Bot = class Bot {
    static create(options = {}) {
      var key, missing, name, ref;
      missing = [];
      for (key in ENV) {
        name = ENV[key];
        if (process.env[name] == null) {
          missing.push(name);
        }
        ENV[key] = process.env[name];
      }
      if (missing.length > 0) {
        throw new Error(`Missing required environment variables:\n\n${missing.join('\n')}\n`);
      }
      ENV.commitMessage = exec('git --no-pager log --pretty=format:"%s" -1').replace(/\\"/g, '\\\\"');
      // will either be a PR with a number or just a commit
      ENV.prNumber = process.env['CI_PULL_REQUEST'] ? basename(process.env['CI_PULL_REQUEST']) : '';
      ENV.githubDomain = (ref = options.githubDomain) != null ? ref : 'api.github.com';
      return new Bot(ENV);
    }

    constructor(env) {
      this.env = env;
    }

    artifactUrl(artifactPath) {
      return `${this.env.buildUrl}/artifacts/0/${this.env.home}/project/${artifactPath}`;
    }

    artifactLink(artifactPath, text) {
      return `<a href='${this.artifactUrl(artifactPath)}' target='_blank'>${text}</a>`;
    }

    githubUrl(path) {
      return `https://${this.env.auth}:x-oauth-basic@${this.env.githubDomain}/${path}`;
    }

    githubRepoUrl(path) {
      return this.githubUrl(`repos/${this.env.username}/${this.env.repo}/${path}`);
    }

    commentIssue(number, body) {
      console.log(`Commenting on issue ${number}`);
      return console.log(curl(this.githubRepoUrl(`issues/${number}/comments`), JSON.stringify({body})));
    }

    commentCommit(sha1, body) {
      console.log(`Commenting on commit with hash ${sha1}`);
      return console.log(curl(this.githubRepoUrl(`commits/${sha1}/comments`), JSON.stringify({body})));
    }

    comment(body) {
      if (this.env.prNumber !== '') {
        return this.commentIssue(this.env.prNumber, body);
      } else {
        return this.commentCommit(this.env.sha1, body);
      }
    }

  };

  module.exports = Bot;

}).call(this);
